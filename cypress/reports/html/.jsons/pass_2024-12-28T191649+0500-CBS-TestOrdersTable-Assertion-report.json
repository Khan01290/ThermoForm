{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 3,
    "failures": -2,
    "start": "2024-12-28T14:16:12.762Z",
    "end": "2024-12-28T14:16:49.360Z",
    "duration": 36598,
    "testsRegistered": 4,
    "passPercent": 0,
    "pendingPercent": 75,
    "other": 3,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0fb6ca45-723a-424d-8f3c-7381d98906fd",
      "title": "",
      "fullFile": "cypress\\e2e\\CBS\\CBS-TestOrdersTable-Assertion.cy.js",
      "file": "cypress\\e2e\\CBS\\CBS-TestOrdersTable-Assertion.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f51ca325-ac64-46b0-8cbb-809aff38b6da",
          "title": "Test Orders Table Fields Assertions Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that all Header buttons are Present",
              "fullTitle": "Test Orders Table Fields Assertions Suite Verify that all Header buttons are Present",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "cy.viewport(1920, 1080);\ncy.visit(\"https://demo.clabsportal.com/\");\n// Login Button Click\n////cy.get(\".text-lg\").contains(\"Existing Customer\")                                                                                                // Assertion for text \"Existing Customer\" is present\ncy.wait(500);\n//cy.get(\".w-full\").contains(\"login\").should('be.visible').and('exist').and('contain','login').click()                                              // Click to Login button and check if the btn text is \"login\"       \ncy.get('[type=\"button\"]').contains(\"login\").should('be.visible').and('exist').and('contain', 'login').click().wait(500); // Click to Login button usimg btn type    >> Best Practise\n// Input username\ncy.origin('https://dev-2737508.okta.com', () => {\n  cy.wait(500);\n  cy.get('input[name=\"username\"]').type(\"silijac368@paldept.com\"); // Get username by attribute name and type in it\n  cy.get('input[name=\"username\"]').should('have.value', 'silijac368@paldept.com'); // Check username if the username is correctly input            \n  cy.get('input[name=\"password\"]').type(\"Cv8cf3iHa\"); // Get password by attribute name and type in it\n  cy.get('input[name=\"password\"]').should('have.value', 'Cv8cf3iHa'); // Check password if the password is correctly input\n  //cy.get(\"input#okta-signin-submit\").should('be.visible').and('exist').and('contain','Sign In').click()                                         // Get submit btn and check if the btn text is \"Sign In\" \n  cy.get('[type=\"submit\"]').contains(\"Sign In\").should('be.visible').and('exist').and('contain', 'Sign In').click().wait(20000); // Get submit btn by btn type and cick on it   >> Best Practise                    \n});\ncy.get('[href=\"/test-orders\"] > .flex', {\n  timeout: 80000\n}).contains(\"test orders\").should('be.visible').and('exist').and('contain', 'orders').click().wait(2000); // Check the URL containing test-orders link           \ncy.get('.flex > .capitalize').contains(\"Test orders\").should('have.text', 'Test orders').should('be.visible').and('exist') // Assertion for \"Test orders\" Page heading is present\n.and('contain', 'Test orders').wait(500);\n//cy.get('[type=\"button\"]').contains(\"new pdf order\").should('have.text','new pdf order').should('be.visible')                                      // Assertion for \"New PDF Order\" Button is present  \n//.and('exist').and('contain','new pdf').wait(500)                               \ncy.get('[type=\"button\"]').contains(\"new online order\").should('have.text', 'new online order').should('be.visible') // Assertion for \"New Online Order\" Button is present \n.and('exist').and('contain', 'new online').wait(500);\n//cy.get('.text-requiredRed').contains(\"pending approval orders\").should('have.text','pending approval orders').should('be.visible')                  // Assertion for \"60 pending approval orders\" Text is present \n//.and('exist').and('contain','pending approval').wait(500)       \ncy.get('[type=\"button\"]').contains(\"view orders\").should('have.text', 'view orders').should('be.visible') // Assertion for \"view orders\" Button is present  \n.and('exist').and('contain', 'view orders').wait(500);\ncy.get('.mr-6 > .flex > .text-royalBlue').contains(\"Hide/Unhide Columns\").should('have.text', 'Hide/Unhide Columns').should('be.visible') // Assertion for \"Hide/Unhide Columns\" Filter is present  \n.and('exist').and('contain', 'Hide/Unhide').click().wait(1000);\ncy.get('[type=\"button\"]').contains(\"Patient First Name\").should('have.text', 'Patient First Name').should('be.visible') // Assertion for \"Patient First Name\" CheckBox is present and UnChecked \n.and('exist').and('contain', 'First Name').click().wait(1000);\ncy.get('.mr-6 > .flex > .text-royalBlue').contains(\"Hide/Unhide Columns\").should('have.text', 'Hide/Unhide Columns').should('be.visible') // Click to \"Hide/Unhide Columns\" Filter again to select next checkbox\n.and('exist').and('contain', 'Hide/Unhide').click().wait(1000);\ncy.get('[type=\"button\"]').contains(\"Patient Last Name\").should('have.text', 'Patient Last Name').should('be.visible') // Assertion for \"Patient Last Name\" Filter is present and UnChecked   \n.and('exist').and('contain', 'Last Name').click().wait(1000);\ncy.get('.mr-6 > .flex > .text-royalBlue').contains(\"Hide/Unhide Columns\").should('have.text', 'Hide/Unhide Columns').should('be.visible') // Click to \"Hide/Unhide Columns\" Filter again to select next checkbox\n.and('exist').and('contain', 'Hide/Unhide').click().wait(1000);\ncy.get('[type=\"button\"]').contains(\"Patient DOB\").should('have.text', 'Patient DOB').should('be.visible') // Assertion for \"Patient DOB\" Filter is present and UnChecked     \n.and('exist').and('contain', 'DOB').click().wait(1000);\ncy.get('.mr-6 > .flex > .text-royalBlue').contains(\"Hide/Unhide Columns\").should('have.text', 'Hide/Unhide Columns').should('be.visible') // Click to \"Hide/Unhide Columns\" Filter again to select next checkbox\n.and('exist').and('contain', 'Hide/Unhide').click().wait(1000);\ncy.get('[type=\"button\"]').contains(\"Patient First Name\").should('have.text', 'Patient First Name').should('be.visible') // Assertion for \"Patient First Name\" CheckBox is present and Checked \n.and('exist').and('contain', 'First Name').click().wait(1000);\ncy.get('.mr-6 > .flex > .text-royalBlue').contains(\"Hide/Unhide Columns\").should('have.text', 'Hide/Unhide Columns').should('be.visible') // Click to \"Hide/Unhide Columns\" Filter again to select next checkbox\n.and('exist').and('contain', 'Hide/Unhide').click().wait(1000);\ncy.get('[type=\"button\"]').contains(\"Patient Last Name\").should('have.text', 'Patient Last Name').should('be.visible') // Assertion for \"Patient Last Name\" Filter is present and Checked   \n.and('exist').and('contain', 'Last Name').click().wait(1000);\ncy.get('.mr-6 > .flex > .text-royalBlue').contains(\"Hide/Unhide Columns\").should('have.text', 'Hide/Unhide Columns').should('be.visible') // Click to \"Hide/Unhide Columns\" Filter again to select next checkbox\n.and('exist').and('contain', 'Hide/Unhide').click().wait(1000);\ncy.get('[type=\"button\"]').contains(\"Patient DOB\").should('have.text', 'Patient DOB').should('be.visible') // Assertion for \"Patient DOB\" Filter is present and Checked     \n.and('exist').and('contain', 'DOB').click().wait(1000);\ncy.get(':nth-child(1) > div.flex > :nth-child(2) > .flex').contains(\"Group By\").should('have.text', 'Group By').should('be.visible') // Assertion for \"Group By\" Filter is present  \n.and('exist').and('contain', 'Group By').click().wait(500);\ncy.get('[type=\"button\"]').contains(\"Patient First Name\").should('have.text', 'Patient First Name').should('be.visible').and('exist') // Assertion for Group By \"Patient First Name\" is present and checked\n.and('contain', 'First Name').click().wait(500);\ncy.get(':nth-child(1) > div.flex > :nth-child(2) > .flex').click().wait(500);\ncy.get('[type=\"button\"]').contains(\"Patient Last Name\").should('have.text', 'Patient Last Name').should('be.visible').and('exist') // Assertion for Group By \"Patient Last Name\" is present and checked                                                                         \n.and('contain', 'Last Name').click().wait(500);\ncy.get(':nth-child(1) > div.flex > :nth-child(2) > .flex').click().wait(500);\ncy.get('[type=\"button\"]').contains(\"Ungroup\").should('have.text', 'Ungroup').should('be.visible').and('exist') // Assertion for \"UnGroup\" is present and checked                                                                         \n.and('contain', 'Ungroup').click().wait(500);",
              "err": {},
              "uuid": "f56b97d8-81bd-4787-939c-fb3c607671c7",
              "parentUUID": "f51ca325-ac64-46b0-8cbb-809aff38b6da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that all Columns of Test Order Table are present & Performing Sorting",
              "fullTitle": "Test Orders Table Fields Assertions Suite Verify that all Columns of Test Order Table are present & Performing Sorting",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "cy.viewport(1920, 1080);\ncy.visit(\"https://demo.clabsportal.com/\");\n// Login Button Click\n////cy.get(\".text-lg\").contains(\"Existing Customer\")                                                                                                // Assertion for text \"Existing Customer\" is present\ncy.wait(500);\n//cy.get(\".w-full\").contains(\"login\").should('be.visible').and('exist').and('contain','login').click()                                              // Click to Login button and check if the btn text is \"login\"       \ncy.get('[type=\"button\"]').contains(\"login\").should('be.visible').and('exist').and('contain', 'login').click().wait(500); // Click to Login button usimg btn type    >> Best Practise\n// Input username\ncy.origin('https://dev-2737508.okta.com', () => {\n  cy.wait(500);\n  cy.get('input[name=\"username\"]').type(\"silijac368@paldept.com\"); // Get username by attribute name and type in it\n  cy.get('input[name=\"username\"]').should('have.value', 'silijac368@paldept.com'); // Check username if the username is correctly input            \n  cy.get('input[name=\"password\"]').type(\"Cv8cf3iHa\"); // Get password by attribute name and type in it\n  cy.get('input[name=\"password\"]').should('have.value', 'Cv8cf3iHa'); // Check password if the password is correctly input\n  //cy.get(\"input#okta-signin-submit\").should('be.visible').and('exist').and('contain','Sign In').click()                                         // Get submit btn and check if the btn text is \"Sign In\" \n  cy.get('[type=\"submit\"]').contains(\"Sign In\").should('be.visible').and('exist').and('contain', 'Sign In').click().wait(20000); // Get submit btn by btn type and cick on it   >> Best Practise                    \n});\ncy.get('[href=\"/test-orders\"] > .flex', {\n  timeout: 80000\n}).contains(\"test orders\").should('be.visible').and('exist').and('contain', 'orders').click().wait(2000); // Check the URL containing test-orders link           \ncy.get('.flex > .capitalize').contains(\"Test orders\").should('have.text', 'Test orders').should('be.visible').and('exist') // Assertion for \"Test orders\" Page heading is present\n.and('contain', 'Test orders').wait(500);\n// columns Assertion\ncy.get('.dropdown-text-container__text').contains(\"Patient First Name\").should('have.text', 'Patient First Name').and('exist') // Assertion for \"Patient First Name\" col + sorting Ascend is present                                                                        \n.and('contain', 'First Name').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Patient First Name\").should('have.text', 'Patient First Name').and('exist') // Assertion for \"Patient First Name\" col + sorting Dscend is present                                                                        \n.and('contain', 'First Name').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Patient Last Name\").should('have.text', 'Patient Last Name').and('exist') // Assertion for \"Patient Last Name\" col is present                                                                        \n.and('contain', 'Last Name').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Patient DOB\").should('have.text', 'Patient DOB').and('exist') // Assertion for \"Patient DOB\" col is present                                                                        \n.and('contain', 'DOB').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Order Type\").should('have.text', 'Order Type').and('exist') // Assertion for \"Order Type\" col is present                                                                        \n.and('contain', 'Order').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Test Type\").should('have.text', 'Test Type').and('exist') // Assertion for \"Test Type\" col is present                                                                        \n.and('contain', 'Test').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Castle ID\").should('have.text', 'Castle ID').and('exist') // Assertion for \"Castle ID\" col is present                                                                        \n.and('contain', 'Castle').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Specimen ID\").should('have.text', 'Specimen ID').and('exist') // Assertion for \"Specimen ID\" col is present                                                                        \n.and('contain', 'Specimen').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Org\").should('have.text', 'Org').and('exist') // Assertion for \"Org\" col is present                                                                        \n.and('contain', 'Org').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Clinician\").should('have.text', 'Clinician').and('exist') // Assertion for \"Clinician\" col is present                                                                        \n.and('contain', 'Clinician').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Ordered Date\").should('have.text', 'Ordered Date').and('exist') // Assertion for \"Ordered Date\" col is present                                                                        \n.and('contain', 'Ordered').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Report Date\").should('have.text', 'Report Date').and('exist') // Assertion for \"Report Date\" col is present                                                                        \n.and('contain', 'Report').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Castle Result\").should('have.text', 'Castle Result').and('exist') // Assertion for \"Castle Result\" col is present                                                                        \n.and('contain', 'Result').click().wait(5000);\ncy.get('.dropdown-text-container__text').contains(\"Status\").should('have.text', 'Status').and('exist') // Assertion for \"Status\" col is present                                                                        \n.and('contain', 'Status').click().wait(5000);\ncy.get('.table-checkbox-container').contains(\"Actions\").should('have.text', 'Actions').and('exist') // Assertion for \"Actions\" col is present                                                                        \n.and('contain', 'Actions').wait(5000);",
              "err": {},
              "uuid": "1cac767c-e773-494c-984c-c6914ef99f3a",
              "parentUUID": "f51ca325-ac64-46b0-8cbb-809aff38b6da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that ORG & Physicins Checks are present and validation messages Assertions are applied",
              "fullTitle": "Test Orders Table Fields Assertions Suite Verify that ORG & Physicins Checks are present and validation messages Assertions are applied",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "cy.viewport(1920, 1080);\ncy.visit(\"https://demo.clabsportal.com/\");\n// Login Button Click\n////cy.get(\".text-lg\").contains(\"Existing Customer\")                                                                                                // Assertion for text \"Existing Customer\" is present\ncy.wait(500);\n//cy.get(\".w-full\").contains(\"login\").should('be.visible').and('exist').and('contain','login').click()                                              // Click to Login button and check if the btn text is \"login\"       \ncy.get('[type=\"button\"]').contains(\"login\").should('be.visible').and('exist').and('contain', 'login').click().wait(500); // Click to Login button usimg btn type    >> Best Practise\n// Input username\ncy.origin('https://dev-2737508.okta.com', () => {\n  cy.wait(500);\n  cy.get('input[name=\"username\"]').type(\"silijac368@paldept.com\"); // Get username by attribute name and type in it\n  cy.get('input[name=\"username\"]').should('have.value', 'silijac368@paldept.com'); // Check username if the username is correctly input            \n  cy.get('input[name=\"password\"]').type(\"Cv8cf3iHa\"); // Get password by attribute name and type in it\n  cy.get('input[name=\"password\"]').should('have.value', 'Cv8cf3iHa'); // Check password if the password is correctly input\n  //cy.get(\"input#okta-signin-submit\").should('be.visible').and('exist').and('contain','Sign In').click()                                         // Get submit btn and check if the btn text is \"Sign In\" \n  cy.get('[type=\"submit\"]').contains(\"Sign In\").should('be.visible').and('exist').and('contain', 'Sign In').click().wait(20000); // Get submit btn by btn type and cick on it   >> Best Practise                    \n});\ncy.get('[href=\"/test-orders\"] > .flex', {\n  timeout: 80000\n}).contains(\"test orders\").should('be.visible').and('exist').and('contain', 'orders').click().wait(2000); // Check the URL containing test-orders link           \ncy.get('.flex > .capitalize').contains(\"Test orders\").should('have.text', 'Test orders').should('be.visible').and('exist') // Assertion for \"Test orders\" Page heading is present\n.and('contain', 'Test orders').wait(500);\n// Top dropdowns assertions and check conditions\ncy.get(':nth-child(1) > [style=\"opacity: 1;\"] > .overflow-hidden > .p-1').should('be.visible').and('exist').click().wait(500); // Assertion for ORG dropdown is present and clicked   \ncy.get('#root > div.h-screen.flex.flex-col.overflow-hidden > header > div:nth-child(2) > div > div:nth-child(1) > div.absolute.shadow-md.z-96.border.rounded-md.bg-white.break-normal.overflow-y-auto.top-7 > ul > div > button').contains(\"REFRESH LIST\").should('be.visible').should('have.text', 'REFRESH LIST').and('exist').click().wait(5000); // Check Refresh Button properly loading all Orgs\ncy.get(':nth-child(1) > [style=\"opacity: 1;\"] > .overflow-hidden > .p-1').should('be.visible').and('exist').click().wait(500); // Check ORG dropdown and click on it    \ncy.get('#root > div.h-screen.flex.flex-col.overflow-hidden > header > div:nth-child(2) > div > div:nth-child(1) > div.absolute.shadow-md.z-96.border.rounded-md.bg-white.break-normal.overflow-y-auto.top-7 > ul > li:nth-child(1) > button > div > p').contains(\"All Organizations\").should('have.text', 'All Organizations').should('be.visible').and('exist').click().wait(500); // Check First li in dropdown having text \"All Organizations\" and select it                                                          \ncy.get('#root > div.h-screen.flex.flex-col.overflow-hidden > header > div:nth-child(2) > div > div:nth-child(2) > div > button') // Click to Cilinician dropdown to select Cilinician           \n.should('be.visible').and('exist').click().wait(500);\ncy.get('.mt-5').contains(\"Please select an organization first.\").should('have.text', 'Please select an organization first.') // Asserion for alert to \"select an ORG First\" is present\n.and('exist').and('contain', 'select an organization first');\ncy.get('.justify-end > .bg-primary > p').should('be.visible').should('have.text', 'OK').and('exist').click().wait(500); // Assertion of Alert \"Ok\" button  is present\ncy.get(':nth-child(1) > [style=\"opacity: 1;\"] > .overflow-hidden > .p-1').should('be.visible').and('exist').click().wait(1000); // Check ORG dropdown and click on it \ncy.get('#root > div.h-screen.flex.flex-col.overflow-hidden > header > div:nth-child(2) > div > div:nth-child(1) > div.absolute.shadow-md.z-96.border.rounded-md.bg-white.break-normal.overflow-y-auto.top-7 > ul > li:nth-child(3) > button > div.text-sm.text-royalBlue.ml-2 > p').contains(\"Android\").should('have.text', 'Android').and('exist').click().wait(500); // Selecting Android Org\ncy.get('div[style=\"opacity: 1;\"] > .bg-primary > p').contains(\"new online order\").should('be.visible').\n// Asserion of button new online order and click on it\nand('exist').and('contain', 'new online').click().wait(500);\ncy.get('.p-5 > .justify-between > .text-royalBlue').contains(\"Create Online Order\").should('be.visible').should('have.text', 'Create Online Order') // Asserion of Alert popup text \"Create Online Order\"\n.and('exist').and('contain', 'Create Online').wait(500);\ncy.get('.justify-end > .bg-primary').should('be.visible').should('have.text', 'OK').and('exist').click().wait(500); // Assertion of Alert Ok button\ncy.get('#root > div.h-screen.flex.flex-col.overflow-hidden > header > div:nth-child(2) > div > div:nth-child(2) > div > button') // Click to Cilinician dropdown to select Cilinician           \n.should('be.visible').and('exist').click().wait(500);\ncy.get(':nth-child(2) > .flex > .text-sm > .break-normal').contains(\"SZK PHY QA\").should('be.visible').should('have.text', 'SZK PHY QA') // Select a Cilinician from dropdown \n.and('exist').click().wait(500);",
              "err": {},
              "uuid": "1cb30326-3aa0-4559-8f53-c4e9d39b5ce1",
              "parentUUID": "f51ca325-ac64-46b0-8cbb-809aff38b6da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that Filtering is working on all Test Order table Columns",
              "fullTitle": "Test Orders Table Fields Assertions Suite Verify that Filtering is working on all Test Order table Columns",
              "timedOut": null,
              "duration": 34452,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\CBS\\\\CBS-TestOrdersTable-Assertion.cy.js\\\\Test Orders Table Fields Assertions Suite -- Verify that Filtering is working on all Test Order table Columns (failed).png\"\n    ]\n  ]\n}",
              "code": "cy.viewport(1920, 1080);\ncy.visit(\"https://demo.clabsportal.com/\");\n// Login Button Click\n////cy.get(\".text-lg\").contains(\"Existing Customer\")                                                                                                // Assertion for text \"Existing Customer\" is present\ncy.wait(500);\n//cy.get(\".w-full\").contains(\"login\").should('be.visible').and('exist').and('contain','login').click()                                              // Click to Login button and check if the btn text is \"login\"       \ncy.get('[type=\"button\"]').contains(\"login\").should('be.visible').and('exist').and('contain', 'login').click().wait(500); // Click to Login button usimg btn type    >> Best Practise\n// Input username\ncy.origin('https://dev-2737508.okta.com', () => {\n  cy.wait(500);\n  cy.get('input[name=\"username\"]').type(\"silijac368@paldept.com\"); // Get username by attribute name and type in it\n  cy.get('input[name=\"username\"]').should('have.value', 'silijac368@paldept.com'); // Check username if the username is correctly input            \n  cy.get('input[name=\"password\"]').type(\"Cv8cf3iHa\"); // Get password by attribute name and type in it\n  cy.get('input[name=\"password\"]').should('have.value', 'Cv8cf3iHa'); // Check password if the password is correctly input\n  //cy.get(\"input#okta-signin-submit\").should('be.visible').and('exist').and('contain','Sign In').click()                                         // Get submit btn and check if the btn text is \"Sign In\" \n  cy.get('[type=\"submit\"]').contains(\"Sign In\").should('be.visible').and('exist').and('contain', 'Sign In').click().wait(20000); // Get submit btn by btn type and cick on it   >> Best Practise                    \n});\ncy.get('[href=\"/test-orders\"] > .flex').contains(\"test orders\").should('be.visible').and('exist').and('contain', 'orders').click().wait(2000); // Check the URL containing test-orders link           \ncy.get('.flex > .capitalize').contains(\"Test orders\").should('have.text', 'Test orders').should('be.visible').and('exist') // Assertion for \"Test orders\" Page heading is present\n.and('contain', 'Test orders').wait(500);\n// Filering\ncy.get('#patientFirstName > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .input').type('IDG Test Two').wait(5000); // Typing \"patientFirstName\" in filter                                                                         \ncy.get('#patientFirstName > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000); // Removing text from filter\ncy.get('#patientLastName > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .input').type('Testing').wait(5000); // Typing \"patientLastName\" in filter\ncy.get('#patientLastName > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000); // Removing text from filter\ncy.get('#patientDOB > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperdate > .icon-and-input-field-wrapper > .flex > .react-datepicker-wrapper > .react-datepicker__input-container > .input').click().wait(2000);\ncy.get(':nth-child(1) > .react-datepicker__day--002').click().wait(5000);\ncy.get('.icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000);\ncy.get('#orderType > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .input').click().wait(2000);\ncy.get('.shadow-md > :nth-child(2)').click().wait(5000);\ncy.get('.icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000);\ncy.get('#testTypeCode > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .input').click().wait(2000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get('.shadow-md > :nth-child(3)').click().wait(5000);\ncy.get('.icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000);\ncy.get('#castle_id > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .input').type('I87987980-13').wait(5000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get('#castle_id > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000);\ncy.get('#specimen_id > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .input').type('9YTRE-A').wait(5000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get('#specimen_id > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000);\ncy.get('#physicianCode > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .input').click().wait(2000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get('.shadow-md > :nth-child(1)').click().wait(5000);\ncy.get('#physicianCode > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000);\ncy.get('#orderDate > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperdate > .icon-and-input-field-wrapper > .flex > .react-datepicker-wrapper > .react-datepicker__input-container > .input').click().wait(2000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get(':nth-child(1) > .react-datepicker__day--002').click().wait(5000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get('.input-wrapperdate > .icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get('#reportDate > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperdate > .icon-and-input-field-wrapper > .flex > .react-datepicker-wrapper > .react-datepicker__input-container > .input').click().wait(2000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get(':nth-child(1) > .react-datepicker__day--002').click().wait(5000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get('.icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get('#castleResult > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .input').type('Test').wait(5000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get('.icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000);\ncy.get('#status > .mt-3 > .font-normal > .text-input-container > .input-container > .input-wrapperstring > .icon-and-input-field-wrapper > .flex > .input').click().wait(2000); // Assertion for \"UnGroup\" is present and checked                                                                         \ncy.get('.drop-shadow-md > :nth-child(10)').click().wait(5000);\ncy.get('.icon-and-input-field-wrapper > .flex > .w-5').click().wait(5000);",
              "err": {
                "message": "CypressError: Timed out retrying after 4000ms: The command was expected to run against origin `https://demo.clabsportal.com` but the application is at origin `https://dev-2737508.okta.com`.\n\nThis commonly happens when you have either not navigated to the expected origin or have navigated away unexpectedly.\n\nUsing `cy.origin()` to wrap the commands run on `https://dev-2737508.okta.com` will likely fix this issue.\n\n`cy.origin('https://dev-2737508.okta.com', () => {`\n`  <commands targeting https://dev-2737508.okta.com go here>`\n`})`\n\nhttps://on.cypress.io/cy-visit-succeeded-but-commands-fail",
                "estack": "CypressError: Timed out retrying after 4000ms: The command was expected to run against origin `https://demo.clabsportal.com` but the application is at origin `https://dev-2737508.okta.com`.\n\nThis commonly happens when you have either not navigated to the expected origin or have navigated away unexpectedly.\n\nUsing `cy.origin()` to wrap the commands run on `https://dev-2737508.okta.com` will likely fix this issue.\n\n`cy.origin('https://dev-2737508.okta.com', () => {`\n`  <commands targeting https://dev-2737508.okta.com go here>`\n`})`\n\nhttps://on.cypress.io/cy-visit-succeeded-but-commands-fail\n    at cypressErr (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:75898:18)\n    at Object.errByPath (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:75952:10)\n    at Object.commandCanCommunicateWithAUT (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:144907:90)\n    at <unknown> (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:131813:22)\n    at Object.subjectFn (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:143709:16)\n    at $Cy.verifyUpcomingAssertions (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:143048:31)\n    at onRetry (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:143700:15)\n    at tryCatcher (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise.attempt.Promise.try (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:4315:29)\n    at whenStable (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:143587:68)\n    at <unknown> (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:143528:14)\n    at tryCatcher (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:1701:18)\n    at Promise._fulfill (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:1645:18)\n    at <unknown> (https://demo.clabsportal.com/__cypress/runner/cypress_runner.js:5450:46)\nFrom Your Spec Code:\n    at Context.eval (webpack://cypressauto/./cypress/e2e/CBS/CBS-TestOrdersTable-Assertion.cy.js:201:11)",
                "diff": null
              },
              "uuid": "e579d6ec-6fed-4d47-81bc-e4939c6f674d",
              "parentUUID": "f51ca325-ac64-46b0-8cbb-809aff38b6da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e579d6ec-6fed-4d47-81bc-e4939c6f674d"
          ],
          "pending": [
            "f56b97d8-81bd-4787-939c-fb3c607671c7",
            "1cac767c-e773-494c-984c-c6914ef99f3a",
            "1cb30326-3aa0-4559-8f53-c4e9d39b5ce1"
          ],
          "skipped": [],
          "duration": 34452,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[status]_[datetime]-[name]-report",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": false,
        "reportPageTitle": "Automation Reports",
        "embeddedScreenshots": false,
        "inlineAssets": false,
        "saveAllAttempts": false,
        "autoOpen": false,
        "overwrite": false,
        "reportFilename": "[status]_[datetime]-[name]-report",
        "html": false,
        "json": true,
        "reportDir": "cypress\\reports\\html\\.jsons"
      },
      "version": "6.2.0"
    }
  }
}